# Composite action to publish MPI Operator images.
name: Build And Publish Container Images
description: Build Multiplatform Supporting Container Images

inputs:
  image:
    required: true
    description: image tag
  dockerfile:
    required: true
    default: Dockerfile
    description: path for Dockerfile
  platforms:
    required: true
    description: e.g, linux/amd64
  suffix:
    required: false
    description: e.g, -openmpi
  context:
    required: false
    default: .
    description: e.g, build/base
  output-artifact-name:
    required: true
    description: e.g, mpi-operator
  load-artifact-name:
    required: false
    description: e.g, openmpi-builder
runs:
  using: composite
  steps:
    - name: Set up Docker
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
      uses: crazy-max/ghaction-setup-docker@v2
      with:
        version: v24.0.6
        daemon-config: |
          {
            "features": {
              "containerd-snapshotter": true
            }
          }

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Docker meta
      if : ${{ inputs.suffix == '' }}
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Docker meta with suffix
      if : ${{ inputs.suffix != '' }}
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.image }}
        tags: |
          type=ref,event=branch,suffix=${{ inputs.suffix }},onlatest=true
          type=ref,event=pr,suffix=${{ inputs.suffix }},onlatest=true
          type=semver,pattern={{version}},suffix=${{ inputs.suffix }},onlatest=true
          type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.suffix }},onlatest=true

    - name: Set up BASE_LABEL
      if: ${{ inputs.load-artifact-name != '' }}
      id: base-label
      shell: bash
      run: |
        echo "BASE_LABEL=$(echo "${{ env.DOCKER_METADATA_OUTPUT_TAGS }}" | cut -d: -f 2)" >> "${GITHUB_OUTPUT}"

    - name: Download artifact
      if: ${{ inputs.load-artifact-name != '' }}
      uses: actions/download-artifact@v3
      with:
#        name: ${{ inputs.load-artifact-name }}
        name: images
#        path: /tmp/${{ inputs.load-artifact-name }}
        path: /tmp/images

    - name: Set up build contexts
      if: ${{ inputs.load-artifact-name != '' }}
      shell: bash
      run: |
        contexts
        
        IFS="," read -r -a ARTIFACT_ARRAY <<< ${{ inputs.load-artifact-name }}
        for artifact in ${ARTIFACT_ARRAY[@]};
        do
          
        done

    - name: Build and Push with BASE_LABEL
      if: ${{ inputs.load-artifact-name != '' }}
      uses: docker/build-push-action@v5
      with:
        platforms: ${{ inputs.platforms }}
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        #        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.DOCKER_METADATA_OUTPUT_TAGS }}
        labels: ${{ steps.meta.outputs.labels }}
#        outputs: type=oci,dest=/tmp/${{ inputs.output-artifact-name }},tar=false
        outputs: type=oci,dest=/tmp/images/${{ inputs.output-artifact-name }},tar=false
        build-contexts: |
          # mpioperator/${{ inputs.load-artifact-name }}:${{ steps.base-label.outputs.BASE_LABEL }}=oci-layout:///tmp/${{ inputs.load-artifact-name }}:${{ steps.base-label.outputs.BASE_LABEL }}
          mpioperator/${{ inputs.load-artifact-name }}:${{ steps.base-label.outputs.BASE_LABEL }}=oci-layout:///tmp/images/${{ inputs.load-artifact-name }}:${{ steps.base-label.outputs.BASE_LABEL }}
        build-args:
          BASE_LABEL=${{ steps.base-label.outputs.BASE_LABEL }}
        provenance: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push without BASE_LABEL
      if: ${{ inputs.load-artifact-name == '' }}
      uses: docker/build-push-action@v5
      with:
        platforms: ${{ inputs.platforms }}
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        #        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.DOCKER_METADATA_OUTPUT_TAGS }}
        labels: ${{ steps.meta.outputs.labels }}
#        outputs: type=oci,dest=/tmp/${{ inputs.output-artifact-name }},tar=false
        outputs: type=oci,dest=/tmp/images/${{ inputs.output-artifact-name }},tar=false
        provenance: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
#        name: ${{ inputs.output-artifact-name }}
        name: images
#        path: /tmp/${{ inputs.output-artifact-name }}
        path: /tmp/images
